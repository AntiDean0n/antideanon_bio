// --- –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–æ–º --- 
const music = document.getElementById('bg-music');
const musicIcon = document.getElementById('music-icon');

// --- –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ --- 
const buttons = document.querySelectorAll('nav button'); // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ 
const sections = { // –û–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ü–∏—è–º –ø–æ –∏—Ö ID 
  main: document.getElementById('main'),
  deffers: document.getElementById('deffers'),
  price: document.getElementById('price'),
  faq: document.getElementById('faq'),
  contact: document.getElementById('contact')
};
const commandInput = document.getElementById('command-input'); // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ 
const logOutput = document.getElementById('log-output'); // –û–±–ª–∞—Å—Ç—å –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ 

let currentTypingEffect = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —ç—Ñ—Ñ–µ–∫—Ç–µ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ 
let logInterval = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ 

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π --- 
function toggleSound() {
  if (music.paused) {
    music.play();
    musicIcon.textContent = 'üîä'; // –ò–∫–æ–Ω–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ 
  } else {
    music.pause();
    musicIcon.textContent = 'üîà'; // –ò–∫–æ–Ω–∫–∞ —Ç–∏—à–∏–Ω—ã 
  }
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ --- 
function typeEffect(element, text, cursorElement) {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç 
  if (currentTypingEffect) {
    clearInterval(currentTypingEffect.interval);
    currentTypingEffect.element.textContent = currentTypingEffect.fullText;
    currentTypingEffect.cursor.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—É—Ä—Å–æ—Ä 
  }

  element.textContent = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ 
  cursorElement.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä 
  let i = 0;
  const speed = 25; // –°–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–±–æ—Ä–∞ (–º—Å –Ω–∞ —Å–∏–º–≤–æ–ª) 
  const fullText = text.trim(); // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ 

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ 
  const interval = setInterval(() => {
    if (i < fullText.length) {
      element.textContent += fullText.charAt(i); // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª 
      i++;
    } else {
      clearInterval(interval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –Ω–∞–±—Ä–∞–Ω 
      cursorElement.style.display = 'inline-block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞ 
    }
  }, speed);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —ç—Ñ—Ñ–µ–∫—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ 
  currentTypingEffect = { element: element, interval: interval, fullText: fullText, cursor: cursorElement };
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ --- 
function showSection(id) {
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–µ–∫—Ü–∏—é 
  if (currentTypingEffect) {
    clearInterval(currentTypingEffect.interval);
    currentTypingEffect.element.textContent = currentTypingEffect.fullText;
    currentTypingEffect.cursor.style.display = 'none';
    currentTypingEffect = null;
  }

  let currentActiveSection = null;
  // –ò—â–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ–∫—Ü–∏—é 
  for (const key in sections) {
    if (sections[key].classList.contains('active-section')) {
      currentActiveSection = sections[key];
      break;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ü–µ–ª–µ–≤–æ–π —Å–µ–∫—Ü–∏–∏ 
  const showTargetSection = () => {
    const targetSection = sections[id];
    if (!targetSection) {
      console.error("Section not found:", id);
      return;
    }
    // –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º –≤–∏–¥–∏–º–æ–π (display: block) –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è active-section, 
    // —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–æ–¥ opacity/transform —Å—Ä–∞–±–æ—Ç–∞–ª. 
    targetSection.style.display = 'block';
    targetSection.offsetHeight; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ CSS-–ø–µ—Ä–µ—Ö–æ–¥–∞ 
    targetSection.classList.add('active-section'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π –ø–æ–∫–∞–∑–∞ 

    // –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –Ω–µ 'main', –∑–∞–ø—É—Å–∫–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ 
    if (id !== 'main') {
      const preElement = targetSection.querySelector('pre[data-typed-text]');
      const cursorElement = targetSection.querySelector('.typed-cursor');
      if (preElement && cursorElement) {
        typeEffect(preElement, preElement.getAttribute('data-typed-text'), cursorElement);
      }
    } else {
      // –î–ª—è 'main' —Å–µ–∫—Ü–∏–∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º —Å–≤–æ—è –∞–Ω–∏–º–∞—Ü–∏—è 'waiting-line' 
      const mainCursor = sections.main.querySelector('.typed-cursor');
      if (mainCursor) mainCursor.style.display = 'none';
    }
  };

  if (currentActiveSection) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ–∫—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –µ–µ 
    currentActiveSection.classList.remove('active-section');
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è transitionend, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ 
    currentActiveSection.addEventListener('transitionend', function handler() {
      currentActiveSection.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ 
      currentActiveSection.removeEventListener('transitionend', handler); // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å 
      showTargetSection(); // –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é 
    }, { once: true }); // –°–ª—É—à–∞—Ç–µ–ª—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ 
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã), —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é 
    showTargetSection();
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ 
  buttons.forEach(btn => {
    btn.classList.toggle('active', btn.dataset.target === id);
  });
}

// --- –û–±—ä–µ–∫—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ --- 
const commands = {
  'help': () => {
    outputToTerminal(` 
Available commands: 
  show <section>  - Displays a section (e.g., show bio, show deffers, show price, show faq, show contact) 
  set theme <color> - Changes the terminal theme (e.g., set theme green, set theme red, set theme default) 
  clear           - Clears the terminal output 
  whoami          - Displays information about you (Easter egg) 
  ping            - Tests network connectivity (dummy) 
  play game       - Launches a simple text-based game (Easter egg) 
    `);
  },
  'show': (args) => {
    const sectionName = args[0];
    if (sections[sectionName]) {
      showSection(sectionName); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏ 
      outputToTerminal(`Section loaded: ${sectionName.toUpperCase()}.`);
    } else {
      outputToTerminal(`[ERROR] Unknown section: ${sectionName}. Try 'show bio'.`, true);
    }
  },
  'set theme': (args) => {
    const themeName = args[0];
    const body = document.body;
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ 
    body.classList.remove('theme-green', 'theme-red');

    if (themeName === 'green') {
      body.classList.add('theme-green');
      outputToTerminal(`Theme set to GREEN.`);
    } else if (themeName === 'red') {
      body.classList.add('theme-red');
      outputToTerminal(`Theme set to RED.`);
    } else if (themeName === 'default') {
      outputToTerminal(`Theme set to DEFAULT.`);
    } else {
      outputToTerminal(`[ERROR] Invalid theme: ${themeName}. Available: green, red, default.`, true);
    }
  },
  'clear': () => {
    logOutput.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–æ–≤ 
    outputToTerminal("Terminal cleared.");
  },
  'whoami': () => {
    outputToTerminal(` 
You are a visitor in the Antideanon Cyber Terminal. 
Your IP: ${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)} 
Status: Authenticated Guest. 
Access Level: Standard. 
`);
  },
  'ping': () => {
    outputToTerminal("Pinging 8.8.8.8 with 32 bytes of data...");
    setTimeout(() => outputToTerminal("Reply from 8.8.8.8: bytes=32 time=1ms TTL=118"), 500);
    setTimeout(() => outputToTerminal("Reply from 8.8.8.8: bytes=32 time=2ms TTL=118"), 1000);
    setTimeout(() => outputToTerminal("Reply from 8.8.8.8: bytes=32 time=1ms TTL=118"), 1500);
    setTimeout(() => outputToTerminal("Ping statistics for 8.8.8.8:\n    Packets: Sent = 3, Received = 3, Lost = 0 (0% loss),\nApproximate round trip times in milli-seconds:\n    Minimum = 1ms, Maximum = 2ms, Average = 1ms"), 2000);
  },
  'play game': () => {
    outputToTerminal(` 
Initiating Text Adventure... 
Welcome, Hacker. You are at a crossroads. 
Type 'left' or 'right'.`);

    let gameActive = true; // –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã 
    const gameHandler = (e) => { // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ 
      if (e.key === 'Enter') {
        const input = commandInput.value.trim().toLowerCase();
        commandInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ 
        if (!gameActive) return;

        if (input === 'left') {
          outputToTerminal("You chose left. You find a data chip. (End of demo game)");
          gameActive = false;
          commandInput.removeEventListener('keydown', gameHandler); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã 
        } else if (input === 'right') {
          outputToTerminal("You chose right. A firewall blocks your path. (End of demo game)");
          gameActive = false;
          commandInput.removeEventListener('keydown', gameHandler); // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 
        } else {
          outputToTerminal("[GAME] Invalid move. Type 'left' or 'right'.");
        }
      }
    };
    commandInput.addEventListener('keydown', gameHandler); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π 
  }
};

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ --- 
function outputToTerminal(message, isError = false) {
  const span = document.createElement('span'); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π span-—ç–ª–µ–º–µ–Ω—Ç 
  const timestamp = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
  span.textContent = `[${timestamp}] ${message}`; // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ 
  if (isError) {
    span.style.color = 'var(--accent-color)'; // –ö—Ä–∞—Å–∏–º –æ—à–∏–±–∫—É –≤ –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç 
  }
  logOutput.appendChild(span); // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–ª–æ–∫ –ª–æ–≥–æ–≤ 
  logOutput.scrollTop = logOutput.scrollHeight; // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ª–æ–≥ –¥–æ –∫–æ–Ω—Ü–∞ 
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ --- 
commandInput.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') { // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Enter 
    const command = commandInput.value.trim(); // –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã 
    commandInput.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ 
    outputToTerminal(`> ${command}`); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ –ª–æ–≥–∞—Ö 

    if (command === '') return; // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—É—Å—Ç–∞—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º 

    const parts = command.toLowerCase().split(' '); // –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏ 
    const mainCommand = parts[0]; // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ 
    const args = parts.slice(1); // –û—Å—Ç–∞–ª—å–Ω–æ–µ - –∞—Ä–≥—É–º–µ–Ω—Ç—ã 

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é 
    if (commands[command]) { // –î–ª—è –∫–æ–º–∞–Ω–¥ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'help', 'clear') 
      commands[command]();
    } else if (commands[mainCommand] && typeof commands[mainCommand] === 'function') { // –î–ª—è –∫–æ–º–∞–Ω–¥ —Å –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'show bio') 
        commands[mainCommand](args);
    } else if (commands[mainCommand + ' ' + args[0]]) { // –î–ª—è –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–∞ 'set theme' (–¥–≤–∞ —Å–ª–æ–≤–∞ + –∞—Ä–≥—É–º–µ–Ω—Ç) 
        commands[mainCommand + ' ' + args[0]](args.slice(1));
    } else {
      outputToTerminal(`[ERROR] UNKNOWN_COMMAND: '${command}'. Type 'help' for options.`, true); // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ 
    }
  }
});

// --- –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ --- 
const systemLogMessages = [
  "SCANNING NETWORK_INTEGRITY_PROTOCOLS...",
  "STATUS: ALL_MODULES_ONLINE.",
  "DATA_STREAM_INITIATED: PORT 443.",
  "DECRYPTING_PACKET_SEQUENCE_0xAF32...",
  "TRAFFIC_ANALYSIS: LOW_LATENCY_DETECTION.",
  "SECURE_CONNECTION_ESTABLISHED.",
  "MONITORING_ANOMALY_DETECTION_SYSTEMS.",
  "PROTOCOL_HANDSHAKE_COMPLETE.",
  "PROCESSING_REQUEST_0xBE1C...",
  "FIREWALL_STATUS: OPTIMAL_PERFORMANCE.",
  "ENCRYPTING_OUTGOING_DATA_PACKETS...",
  "SYSTEM_HEALTH: NOMINAL.",
  "CHECKING_ACCESS_LOGS_FOR_INTRUSIONS...",
  "IDLE_MODE_ACTIVATED. POWER_SAVE: 75%.",
  "UPDATING_THREAT_DATABASE_VERSION_4.7.1...",
  "ALERT: NO_THREATS_DETECTED.",
  "ROUTING_THROUGH_SECURE_PROXY_NODE_B9C.",
  "GENERATING_ENCRYPTION_KEYS...",
  "SYNCHRONIZING_SYSTEM_CLOCK_WITH_NTP_SERVER."
];

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ --- 
function generateSystemLog() {
  const randomIndex = Math.floor(Math.random() * systemLogMessages.length);
  const message = systemLogMessages[randomIndex];
  const span = document.createElement('span');
  const timestamp = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
  span.textContent = `[${timestamp}] ${message}`;
  logOutput.appendChild(span);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –ª–æ–≥–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å DOM 
  if (logOutput.children.length > 50) {
    logOutput.removeChild(logOutput.children[0]); // –£–¥–∞–ª—è–µ–º —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É 
  }
  logOutput.scrollTop = logOutput.scrollHeight; // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é 
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã --- 
document.addEventListener('DOMContentLoaded', () => {
  // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. 
  // –ë—Ä–∞—É–∑–µ—Ä—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
  music.play().catch(e => {
    console.log("Autoplay music failed:", e);
    musicIcon.textContent = 'üîà'; // –ï—Å–ª–∏ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫—É "–≤—ã–∫–ª—é—á–µ–Ω –∑–≤—É–∫" 
  });

  showSection('main'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 'main' —Å–µ–∫—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ 

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ 
  buttons.forEach(button => {
    button.addEventListener('click', () => {
      const targetId = button.dataset.target; // –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–µ–≤–æ–π —Å–µ–∫—Ü–∏–∏ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞ 
      showSection(targetId); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏ 
    });
  });

  // –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å —Å–ª—É—á–∞–π–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 
  logInterval = setInterval(generateSystemLog, 3000 + Math.random() * 2000); // –°–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 3 –¥–æ 5 —Å–µ–∫—É–Ω–¥ 
});

// --- –ì–ª–∏—Ç—á —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏) --- 
buttons.forEach(button => {
  button.addEventListener('mouseover', () => {
    button.style.filter = 'url(#glitch)'; // –ü—Ä–∏–º–µ–Ω—è–µ–º SVG-—Ñ–∏–ª—å—Ç—Ä 
  });
  button.addEventListener('mouseout', () => {
    button.style.filter = 'none'; // –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä 
  });
});
